@page "/"
@using BlazorInterAutoProj.Components.Editor
@using Newtonsoft.Json
@using SharpFileServiceProg.Service
@using SharpRepoBackendProg.Service
@using System.Diagnostics
@using SharpSetupProg21Private.AAPublic.Models

@inject BackendService backendService
@inject IFileService fileService

@rendermode InteractiveServer

<!--<PageTitle>Home 2</PageTitle>-->

<div>
    <input type="button" value="<" @onclick="OnBackArrowBtnClicked" />
    <input type="button" value="Go" @onclick="OnGoBtnClicked" />
    Repo<input type="text" @bind=@formRepoName />
    Loca<input type="text" @bind=@formLocaName />
</div>

<div>
    Item type: @item
</div>

<div>
    Name: <textarea style="width: 550px; height: 30px;">@item?.Name</textarea>
</div>

<div>
    <TextView @bind-Item=@item ReloadItem=@ReloadItem></TextView>
    <Folder @bind-Item=@item ReloadItem=@ReloadItem></Folder>
</div>

@code {
    private ItemModel2 item;

    private string formRepoName;
    private string formLocaName;

    public Home()
    {
        if (item == null)
        {
            item = new ItemModel2() { Address = "Notki" };
        }
    }

    private bool IsMyType()
    {
        return true;
    }

    protected override async Task OnInitializedAsync()
    {
        var adrTuple = fileService.RepoAddress
             .CreateAddressFromString(item.Address);
        ReloadItem(adrTuple);
    }

    protected void ReloadItem((string Repo, string Loca) address)
    {
        var itemJString = GetItem(address);
        var itemObj = JsonConvert.DeserializeObject<ItemModel2>(itemJString);
        item = itemObj;
        var adrTuple = fileService.RepoAddress
             .CreateAddressFromString(item.Address);
        formRepoName = adrTuple.Item1;
        formLocaName = adrTuple.Item2;
    }

    protected void ReloadItem(ItemModel2 item, bool reloadState)
    {
        var itemType = this.item.Type;
        this.item.Type = itemType;
        var adrTuple = fileService.RepoAddress
             .CreateAddressFromString(item.Address);
        formRepoName = adrTuple.Item1;
        formLocaName = adrTuple.Item2;
        if (reloadState)
        {
            //StateHasChanged();
        }
        //@Html.EditorFor(model => model); 
    }

    public void OnGoBtnClicked(MouseEventArgs e)
    {
        var address = (formRepoName, formLocaName);
        ReloadItem(address);
    }

    public string GetItem((string Repo, string Loca) address)
    {
        var itemJson = backendService.CommandApi("GetItem", address.Repo, address.Loca);
        return itemJson;
    }

    private async Task OnBackArrowBtnClicked(MouseEventArgs e)
    {
        var newAddress = fileService.RepoAddress
             .MoveOneLocaBack(item.Address);
        var newAdrTuple = fileService.RepoAddress
             .CreateAddressFromString(newAddress);
        ReloadItem(newAdrTuple);
    }
}
