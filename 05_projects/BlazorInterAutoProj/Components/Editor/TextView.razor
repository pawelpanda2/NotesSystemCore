@using Newtonsoft.Json
@using SharpFileServiceProg.Service
@using SharpRepoBackendProg.Service
@using SharpSetupProg21Private.AAPublic.Models
@inject IFileService fileService
@inject BackendService backendService

@rendermode InteractiveServer

@if (Item?.Type == myType)
{
    <input type="button" value="Content" @onclick="ContentClicked" />
    <input type="button" value="Config" @onclick="ConfigClicked" />
    <input type="button" value="GoogleDoc" @onclick="GoogleDocClicked" />

   @foreach (var line in linesList)
   {
       <div>@line</div>
   }

    
}

@code {
    public ItemModel2 item;

    [Parameter]
    public ItemModel2 Item
    {
        get => item;
        set
        {
            item = value;
        }
    }

    [Parameter]
    public Action<ItemModel2, bool> ReloadItem { get; set; }

    private string myType = "Text";

    private List<string> linesList;

    protected override async Task OnInitializedAsync()
    {
        ReloadComponent();
    }

    private EventCallback<ItemModel2> itemChanged;

    [Parameter]
    public EventCallback<ItemModel2> ItemChanged
    {
        get => itemChanged;
        set
        {
            itemChanged = value;
            ReloadComponent();
        }
    }

    private void ReloadComponent()
    {
        var tmp = Item?.Body.ToString();
        var lines = tmp.Split("\n").ToList();
        linesList = lines;
        //StateHasChanged();
    }

    private void ContentClicked()
    {
        var adrTuple = fileService.RepoAddress
              .CreateAddressFromString(Item.Address);
        var itemJson = backendService.CommandApi("OpenContent", adrTuple.Item1, adrTuple.Item2);
    }

    private void ConfigClicked()
    {
        var adrTuple = fileService.RepoAddress
              .CreateAddressFromString(Item.Address);
        var itemJson = backendService.CommandApi("OpenConfig", adrTuple.Item1, adrTuple.Item2);
    }


    private void GoogleDocClicked()
    {
        var adrTuple = fileService.RepoAddress
              .CreateAddressFromString(Item.Address);
        var itemJson = backendService.CommandApi("OpenGoogleDoc", adrTuple.Item1, adrTuple.Item2);
    }


    private void OnBtnClicked(string idxString)
    {
        var index = fileService.Index.StringToIndex(idxString);
        var adrTuple = fileService.RepoAddress
             .CreateAddressFromString(Item.Address);
        var newAddress = fileService.Index.JoinIndexWithLoca(adrTuple, index);
        var itemJString = GetItem(newAddress);
        var itemObj = JsonConvert.DeserializeObject<ItemModel2>(itemJString);

        if (itemObj.Type != myType)
        {
            ReloadItem(itemObj, true);
            return;
        }
        
        ReloadItem(itemObj, false);
        Item = itemObj;
        ReloadComponent();
    }

    public string GetItem((string Repo, string Loca) address)
    {
        var itemJson = backendService.CommandApi("GetItem", address.Repo, address.Loca);
        return itemJson;
    }
}
