@using Newtonsoft.Json
@using SharpFileServiceProg.Service
@using SharpRepoBackendProg.Service
@using SharpSetupProg21Private.AAPublic.Models
@inject IFileService fileService
@inject BackendService backendService
@rendermode InteractiveServer

@if (Item?.Type == myType)
{
    <div>
        <input type="button" value="Folder" @onclick="OnFolderClicked" />
        <input type="button" value="Config" @onclick="ConfigClicked" />
    </div>

    <div>
        <input type="button" value="Add" @onclick="OnAddClicked" />
        <select @bind="@formSelectedType">
            <option value="Text">Text</option>
            <option value="Folder">Folder</option>
        </select>
        <input type="text" @bind=@formAddValue>
    </div>

   @foreach (var indexQname in GetIndexQnameDict())
   {
       <div>
           @indexQname.Key
           <input type="button" value="@indexQname.Value" @onclick="() => OnBtnClicked(indexQname.Key)" />
       </div>
   }
}

@*
@foreach (var indexQname in GetIndexQnameDict())
{
    <tr>
        <td>@indexQname.Key</td>
        <!-- <td><a @onclick=@OnUrlClicked() href="#"></a></td> -->
        <input type="button" value="@indexQname.Value" @onclick="() => OnBtnClicked(indexQname.Key)" />
    </tr>
}
*@
@code {
    [Parameter]
    public ItemModel2 Item { get; set; }

    [Parameter]
    public Action<ItemModel2, bool> ReloadItem { get; set; }

    private string formAddValue;
    private string formSelectedType;

    private Dictionary<string, string> indexQnameDict;
    private string myType = "Folder";

    protected override async Task OnInitializedAsync()
    {
        ReloadComponent();
    }

    //private EventCallback<ItemModel2> itemChanged;

    [Parameter]
    public EventCallback<ItemModel2> ItemChanged { get; set; }

    void ItemChangeHandler(ItemModel2 item)
    {

    }

    private void ReloadComponent()
    {
        indexQnameDict = GetIndexQnameDict();
    }

    private Dictionary<string, string> GetIndexQnameDict()
    {
        if (Item.Type == myType)
        {
            var tmp = JsonConvert.DeserializeObject<Dictionary<string, string>>(Item?.Body.ToString());
            if (tmp is Dictionary<string, string> dict)
            {
                return dict;
            }
        }

        return default;
    }

    
    private void OnAddClicked()
    {
        if (string.IsNullOrEmpty(formAddValue))
        {
            return;
        }

        var adrTuple = fileService.RepoAddress
             .CreateAddressFromString(Item.Address);
        if (formSelectedType == "Text")
        {
            var itemJson = backendService
                .CommandApi("CreateItem", adrTuple.Item1, adrTuple.Item2, formAddValue, "Text");
        }
        if (formSelectedType == "Folder")
        {
            var itemJson = backendService
                .CommandApi("CreateItem", adrTuple.Item1, adrTuple.Item2, formAddValue, "Folder");
        }
    }

    private void OnFolderClicked()
    {
        var adrTuple = fileService.RepoAddress
             .CreateAddressFromString(Item.Address);
        var itemJson = backendService
            .CommandApi("OpenFolder", adrTuple.Item1, adrTuple.Item2);
    }

    private void ConfigClicked()
    {
        var adrTuple = fileService.RepoAddress
              .CreateAddressFromString(Item.Address);
        var itemJson = backendService.CommandApi("OpenConfig", adrTuple.Item1, adrTuple.Item2);
    }

    private void OnBtnClicked(string idxString)
    {
        var index = fileService.Index.StringToIndex(idxString);
        var adrTuple = fileService.RepoAddress
             .CreateAddressFromString(Item.Address);
        var newAddress = fileService.Index.JoinIndexWithLoca(adrTuple, index);
        var itemJString = GetItem(newAddress);
        var itemObj = JsonConvert.DeserializeObject<ItemModel2>(itemJString);

        if (itemObj.Type != myType)
        {
            ReloadItem(itemObj, true);
            return;
        }

        ReloadItem(itemObj, false);
        Item = itemObj;
        ReloadComponent();
    }

    public string GetItem((string Repo, string Loca) address)
    {
        var itemJson = backendService.CommandApi("GetItem", address.Repo, address.Loca);
        return itemJson;
    }
}
